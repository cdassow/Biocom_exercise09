print(i)
}
letters <- c("A","B","C","D")
#vector challenge
?paste
for (i in 1:4) {
paste(letters[i])
paste(letters[i])
}
for (i in 1:4) {
print(letters[i])
print(letters[i])
}
for (i in 1:4) {
paste(letters[i,2])
}
for (i in 1:4) {
paste(letters[i],letters[i],sep="")
}
newletters=letters
For(i in 1:4){
newletters<-paste(letters[i],letters[i],sep="")
}
newletters=letters
For(i in 1:4){
newletters<-paste(letters[i],letters[i],sep="")
}
newletters=letters
for (i in 1:4){
newletters[i]<-paste(letters[i],letters[i],sep="")
}
inputnumbers<-3,10,4,12,55
inputnumbers<-[3,10,4,12,55]
inputnumbers<-c(3,10,4,12,55)
for (i in 1:5){
sum(inputnumbers[i])
}
inputnumbers<-c(3,10,4,12,55)
output<-numberic(length(input))
for (i in 1:length(input)){
output[i]<-sum(inputnumbers[1:i]
}
inputnumbers<-c(3,10,4,12,55)
output<-numberic(length(input))
for (i in 1:length(input)){
output[i]<-sum(inputnumbers[1:i]
}
for (i in 1:length(input)){
output[i]<-sum(inputnumbers[1:i]
#install f(x) for creating multi-panel plots
install.packages("cowplot")
library(ggplot2)
library(cowplot)
ggplot(data=mpg, mapping=aes(x=displ, y=cty))
#creates a plot with aesthetics, but no geometrics and stores it
a=ggplot(data=mpg, mapping=aes(x=displ, y=cty))
#execute to print the plot
a
#now we will add geometrics
#for scatterplot
a+geom_point()
#for line plot
a+geom_line()
#we can change the appearance of the plot by adding other elements
#change the theme; change the x and y labels
a+geom_point(color="blue", shape =22, size =3) +theme_bw +xlab("displacement (1)") +ylab("miles per gallon-city")
#we can change the appearance of the plot by adding other elements
#change the theme; change the x and y labels
a+geom_point(color="blue", shape =22, size =3) +theme_bw() +xlab("displacement (1)") +ylab("miles per gallon-city")
#change the appearance of data using criteria
#continuous - color points base on cyl (cylinder)
a+geom_point(aes(color=drv), shape = 22, size=3) +theme_bw() +xlab("displacement(1)" +ylab("miles per gallon-city"))
#change the appearance of data using criteria
#continuous - color points base on cyl (cylinder)
a+geom_point(aes(color=drv), shape = 22, size=3) +theme_bw() + xlab("displacement (1)" +ylab("miles per gallon-city"))
#change the appearance of data using criteria
#continuous - color points base on cyl (cylinder)
a+geom_point(aes(color=cyl), shape = 22, size=3) +theme_bw() + xlab("displacement (1)" +ylab("miles per gallon-city"))
#change the appearance of data using criteria
#continuous - color points base on cyl (cylinder)
a+geom_point(aes(color=cyl), shape = 22, size=3) +theme_bw() + xlab("displacement (1)") + ylab ("miles per gallon-city"))
#change the appearance of data using criteria
#continuous - color points base on cyl (cylinder)
a+geom_point(aes(color=cyl), shape = 22, size=3) +theme_bw() + xlab("displacement (l)") + ylab ("miles per gallon-city")
#categorical -color point based on drv (drive type)
a+geom_point(aes(color=drv), shape=22, size=3) + theme_bw() +xlab("displacement (l)")+ylab("miles per gallon-city")
# model for simulating muscle oxygen content depending on activity level (exercise) and heart rate
# model parameters; https://data-flair.training/blogs/r-vector/
# 1 ml O2 is 1.43 mg O2 at Standard Temperature and Pressure
Oblood = 0.2*1.43 # mg O2 (ml blood)-1
f = 0.7  # maximum fraction of oxygen transferred from blood to tissue
b = 0.0357 # ml blood /(beat 100 ml muscle)-1
Odemand = 0.11*1.43 # mg O2 (100 ml muscle minute)-1
Omax = 10 # max oxygen content in mg O2/100ml
timesteps = 120 # run each simulation for 120 timesteps (minutes)
O = numeric(timesteps) # vector for the results of the simulations of muscle oxygen content
O[1] = 5 # initial oxygen content for the models is 5 mg O2/100ml
?numeric
# multiple model simulations follow to calculate muscle oxygen content
# with different input heart rates and activity levels for 120 minutes each; https://campus.datacamp.com/courses/intermediate-r-for-finance/loops-3?ex=9
# and an initial muscle oxygen content of 5 mg O2
# muscle oxygen content is updated each minute based on previous muscle oxygen content
### 1) simulation of model without homeostasis regulating heart rate
# resting activity level and resting heart rate
Hrate = 65 # 50-200; heart rate beats per minute
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outflux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 65 # 50-200; heart rate beats per minute
Alevel2 = 2.0 # 1 for rest and >2 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of the no homeostasis simulation
# plot the results of each simulation to compare the change in muscle oxygen content over time
# depending on the input heart rate and activity level
# https://www.datacamp.com/community/tutorials/15-questions-about-r-plots
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="No homeostasis") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
#### 2) simulation of model with homeostasis regulating heart rate
# resting activity level and resting heart rate
Hrate = 65 # 50-200; heart rate beats per minute
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outflux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 65 # 50-200; heart rate beats per minute   ENTER CHANGES TO ELEVATED HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with homeostasis simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With homeostasis") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 65 # 50-200; heart rate beats per minute
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outflux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 140 # 50-200; heart rate beats per minute   ENTER CHANGES TO ELEVATED HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with homeostasis simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With homeostasis") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 65 # 50-200; heart rate beats per minute
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outflux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 130 # 50-200; heart rate beats per minute   ENTER CHANGES TO ELEVATED HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with homeostasis simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With homeostasis") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 62 # 50-200; heart rate beats per minute  ENTER YOUR RESTING HEART RATE HERE
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outlfux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 100 # 50-200; heart rate beats per minute  ENTER YOUR POST EXERCISE HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with experimental data simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With experimental data") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 62 # 50-200; heart rate beats per minute  ENTER YOUR RESTING HEART RATE HERE
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outlfux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 108 # 50-200; heart rate beats per minute  ENTER YOUR POST EXERCISE HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with experimental data simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With experimental data") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 67.2 # 50-200; heart rate beats per minute  ENTER YOUR RESTING HEART RATE HERE
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outlfux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 103.8 # 50-200; heart rate beats per minute  ENTER YOUR POST EXERCISE HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with experimental data simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With experimental data") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
# resting activity level and resting heart rate
Hrate = 67.2 # 50-200; heart rate beats per minute  ENTER YOUR RESTING HEART RATE HERE
Alevel = 1 # 1 for rest and 2.0 for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate*f*b*(1-O[i-1]/Omax)
Outflux = Odemand*Alevel
O[i] = O[i-1]+Influx-Outflux
}
Ostar=(Omax/(Oblood*Hrate*f*b))*(Oblood*Hrate*f*b-Odemand*Alevel)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar,1),"mg O2/(100 ml muscle)."))
# high activity level and resting heart rate
O2 = O #results of the second simulation of muscle oxygen content
Hrate2 = 103.8 # 50-200; heart rate beats per minute  ENTER YOUR POST EXERCISE HEART RATE HERE
Alevel2 = 2.0 # 1 for rest and 2.0 or greater for exercise; activity level of skeletal muscle
for(i in 2:length(O)){
Influx = Oblood*Hrate2*f*b*(1-O2[i-1]/Omax)
Outflux = Odemand*Alevel2
O2[i] = O2[i-1]+Influx-Outflux
}
Ostar2=(Omax/(Oblood*Hrate2*f*b))*(Oblood*Hrate2*f*b-Odemand*Alevel2)
print(paste("Your estimated equilibrium skeletal muscle oxygen level is:",round(Ostar2,1),"mg O2/(100 ml muscle)."))
# plot results of with experimental data simulation
plot(1:length(O),O, type='l', xlab="Timestep (minute)", ylab="Oxygen Content (mg O2/100ml)", ylim=c(0, 10),main="With experimental data") # first simulation results, line colored black
lines(1:length(O2),O2, col='red') # second simulation results, line colored red
legend("top", bty="n", inset=0, legend=c("Resting", "Active"), col=c("black", "red"), lty=1:1, cex=0.8, horiz = TRUE)
#if you want to change the colors do...
#categorical - color points based on drv (drive type)
#categorical - color points based on drv (drive type)
a + geom_point(aes(color=drv), shape = 22, size = 3) + theme_bw() + xlab("displacement (l)") + ylab("miles per gallon-city") + scale_color_manual(values = c("purple", "darkgreen", "red"))
#add a linear trendline with a new layer
a + geom_point() +xlab("displacement (l)") + ylab("miles per gallon-city") + stat_smooth(method = "loess") +theme_bw()
#add a linear trendline with a new layer
a + geom_point() +xlab("displacement (l)") + ylab("miles per gallon-city") + stat_smooth(method = "lm") +theme_bw()
#barplot with mean and standard error
a + xlab("displacement (l)") + ylab("miles per gallon-city") + theme_bw() + StatSummary(geom = "bar", fun.y = "mean") + stat_summary(geom = "errorbar", fun.data = "mean_se")
#barplot with mean and standard error
a + xlab("displacement (l)") + ylab("miles per gallon-city") + theme_bw() + statsummary(geom = "bar", fun.y = "mean") + stat_summary(geom = "errorbar", fun.data = "mean_se")
#barplot with mean and standard error
a + xlab("displacement (l)") + ylab("miles per gallon-city") + theme_bw() + statsummary(geom = "bar", fun.y = "mean") + stat_summary(geom = "errorbar", fun.data = "mean_se")
#barplot with mean and standard error
a + xlab("displacement (l)") + ylab("miles per gallon-city") + theme_bw() + stat_summary(geom = "bar", fun.y = "mean") + stat_summary(geom = "errorbar", fun.data = "mean_se")
#reading in
mpg=read.table("C:/Users/Faith/Desktop/mpg.txt", sep = '\t',header = TRUE, stringsAsFactors = FALSE)
View(mpg)
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color=drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
#creates a plot with aesthetics, but no geometrics and stores it
a=ggplot(data=mpg, mapping=aes(x=hwy, y=cty))
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color=drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
#creates a plot with aesthetics, but no geometrics and stores it
a=ggplot(data=mpg)
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color=drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
#creates a plot with aesthetics, but no geometrics and stores it
a=ggplot(data=mpg, aes(x=hwy, y=cty))
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color=drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
?geom_point
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(colour=drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color= factor(drv))) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm")
#Challenge
#number 1: A scatter plot of miles per gallon city versus miles per gallon highway. Color code the points by ‘drv’
#(four-wheel drive vs. front-wheel drive vs. rear-wheel drive). Add a linear trendline to the plot.
a + geom_point(aes(color= drv)) + xlab("miles per gallon-highway") + ylab("miles per gallon-city") + stat_smooth("lm") +theme_classic()
#number 2: A “density plot” of engine displacement. Save the figure to your computer using the function ggsave().
b=ggplot(mpg, aes(x=displ))+ geom_density() + theme_classic()
b
#number 3: A barplot of mean displacement for different numbers of cylinders (cyl).
c=ggplot(mpg, aes(x=cly, y-displ))+ stat_summary(geom= "bar", fun.y = "mean") + stat_summary(geom="errorbar", dun.data = "mean.se", width = 0.3)+theme_classic()
#number 3: A barplot of mean displacement for different numbers of cylinders (cyl).
c=ggplot(mpg, aes(x=cly, y-displ))+ stat_summary(geom= "bar", fun.y = "mean") + stat_summary(geom="errorbar", fun.data = "mean.se", width = 0.3)+theme_classic()
c
#number 3: A barplot of mean displacement for different numbers of cylinders (cyl).
c=ggplot(mpg, aes(x=cyl, y-displ))+ stat_summary(geom= "bar", fun.y = "mean") + stat_summary(geom="errorbar", fun.data = "mean.se", width = 0.3)+theme_classic()
c
#number 3: A barplot of mean displacement for different numbers of cylinders (cyl).
c=ggplot(mpg, aes(x=cyl, y=displ))+ stat_summary(geom= "bar", fun.y = "mean") + stat_summary(geom="errorbar", fun.data = "mean.se", width = 0.3)+theme_classic()
c
#number 3: A barplot of mean displacement for different numbers of cylinders (cyl).
c=ggplot(mpg, aes(x=cyl, y=displ))+ stat_summary(geom= "bar", fun.y = "mean") + stat_summary(geom="errorbar", fun.data = "mean_se", width = 0.3)+theme_classic()
c
#installing packages
install.packages(ggmap)
#installing packages
install.packages("ggmap")
install.packages("maps")
install.packages("maps")
install.packages("mapdata")
install.packages("usmap")
states <- map_data("state")
ggplot(data=states) + geom_polygon(aes(x=long,y=lat,group=group), color="black") + coord_quickmap()
ggplot(data=states) + geom_polygon(aes(x=long,y=lat,group=group), color="black", fill="white") + coord_quickmap()
View(states)
library(maps)
library(ggplot2)
library(usmap)
View(mpg)
View(mpg)
#plot a map with the points for each state prop
ggplot()+
geom_polygon(data=states, aes(x=long, y=lat, group=group), fill="grey70", color="black")+
coord_quickmap() + theme_void()+
geom_point(data=statell, aes(x=Longitude, y=Latitude, size = hockeyPlayers))
states = map_data("state")
head(states)
statell=read.csv("C:/Users/Faith/Desktop/Biocompexercises/statelatlong.csv", stringsAsFactors = FALSE)
#plot map of the US
ggplot()+
geom_polygon(data=states, aes(x=long, y=lat, group=group), fill="grey70", color="black")+
coord_quickmap() + theme_void()+
geom_point(data=statell, aes(x=Longitude, y=Latitude))
#plot a map with the points for each state prop
ggplot()+
geom_polygon(data=states, aes(x=long, y=lat, group=group), fill="grey70", color="black")+
coord_quickmap() + theme_void()+
geom_point(data=statell, aes(x=Longitude, y=Latitude, size = hockeyPlayers))
View(statell)
plot_usmap(data=statell,values="hockeyPlayers",color="violet")+ scale_fill_continuous(name="HockeyPlayersConcentration")+
theme(legend.position="right")
View(states)
iris=read.csv("C:/Users/Faith/Desktop/Biocompexercises/iris.csv", stringsAsFactors = FALSE)
View(iris)
ggplot(iris, aes(x=Sepal.Width))+ geom_boxplot()
ggplot(iris, aes(x=Sepal.Width, group=group))+ geom_boxplot()
ggplot(iris, aes(x=Sepal.Width))+ geom_boxplot()
ggplot(iris, aes(x=Sepal.Width))+ geom_density(aes(fill=Species, color=Species), alpha=0.5)
setwd("C:/Users/Faith/Desktop/Biocompexercises")
setwd("C:/Users/Faith/Desktop/Biocompexercises/Notes")
#practicing for loops
#index variable is "i" and set is "1:4" which means it will go through whatever i is 4 times
myVector<-c('one', 'two', 'three', 'four')
for (i in 1:4){
print(i)
print(myVector[i])
}
ants<-read.csv("ants.csv", header=TRUE, stringsAsFactors = TRUE)
View(ants)
?paste
ants<-read.csv("ants.csv", header=FALSE, stringsAsFactors = TRUE)
for (i in 1:10){
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2]))
print(paste("The little one stops to", ants[i,3]))
print("And they all go marching down to the ground")
print("To get out of the rain, BOOM! BOOM! BOOM!")
}
#get the lyrics to the ants go marching using the ants file
#ants[i,2]
#start on the inside and work outside... ants[i,2] will call out a number one through four, paste combines different strings
for (i in 1:10){
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2]))
print(paste("The little one stops to", ants[i,3]))
print("And they all go marching down to the ground")
print("To get out of the rain, BOOM! BOOM! BOOM!")
print("")
print("")
}
#get the lyrics to the ants go marching using the ants file
#ants[i,2]
#start on the inside and work outside... ants[i,2] will call out a number one through four, paste combines different strings
for (i in 1:nrow(ants)){
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2], "hurrah, hurrah"))
print(paste("The ants go marching", ants[i,2], "by", ants[i,2]))
print(paste("The little one stops to", ants[i,3]))
print("And they all go marching down to the ground")
print("To get out of the rain, BOOM! BOOM! BOOM!")
print("")
print("")
}
setwd("C:/Users/Faith/Desktop/Biocompexercises/Biocom_exercise09")
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
HoursSleep <- read.csv("C:/Users/Faith/Desktop/Biocompexercises/Biocom_exercise09/hoursslept.csv", header=T, stringsAsFactors = T)
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
HoursSleep <- read.csv("C:/Users/Faith/Desktop/Biocompexercises/Biocom_exercise09/hoursslept.csv", header=T, stringsAsFactors = T)
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
HoursSleep <- read.csv("C:/Users/Faith/Desktop/Biocompexercises/Biocom_exercise09/hoursslept.csv", header=T, stringsAsFactors = T)
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
HoursSleep <- read.csv("hoursslept.csv", header=T, stringsAsFactors = T)
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
getwd
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
getwd()
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
read.csv("iris")
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
read.csv("C:/Users/Faith/Desktop/Biocompexercises/Biocom_exercise09/iris", header=T)
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
read.csv("C:/Users/Faith/Desktop/Biocompexercises/wages", header=T)
?read.csv
#Question One
#I will plot the data from my fitbit which gives me averages hours of sleep per month
#This step will read in the file
read.table("hoursslept.csv", header=T)
